# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set scrolloff 5
set color256
set icons

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
  case $(file --mime-type $f -b) in
    text/*)
      $EDITOR $fx;;
    *)
      for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
  esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash ${{
  set -f
  if type gio >/dev/null 2>&1; then
    gio trash $fx
  else
    for f in $fx; do
      mv $f ~/.trash/$(printf $f | tr '/' '%')
    done
  fi
}}

# define a custom 'delete' command
cmd delete ${{
  set -f
  clear
  printf "$fx\n"
  printf "Delete? [y/n]: "
  read answer
  [ $answer = "y" ] && rm -rf $fx
  clear
}}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash

# (xkcd link: https://xkcd.com/1168/)
# extract the current file with the right command
cmd extract ${{
  set -f
  case $f in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    *.tar.gz|*.tgz) tar xzvf $f;;
    *.tar.xz|*.txz) tar xJvf $f;;
    *.zip) unzip $f;;
    *.rar) unrar x $f;;
    *.7z) 7z x $f;;
  esac
}}

map E extract "$f"

# compress current file or selected files with tar and gunzip
cmd tar ${{
  set -f
  mkdir $1
  cp -r $fx $1
  tar czf $1.tar.gz $1
  rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
  set -f
  mkdir $1
  cp -r $fx $1
  zip -r $1.zip $1
  rm -rf $1
}}


set previewer "~/.config/lf/previewer"
map i $~/.config/lf/previewer "$f" | less -R

map e $$EDITOR $f
map i $$PAGER $f
map w $$SHELL

# reload config
map R source "~/.config/lf/lfrc"

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map za set info size:time
map zh set hidden!
map zn set info
map zr set reverse!
map zs set info size
map zt set info time

map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time

map gg top
map gh cd ~

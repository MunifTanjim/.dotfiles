# vim: set filetype=zsh foldmethod=marker foldmarker=[[[,]]] :

# [[[ options
setopt COMBINING_CHARS
setopt INTERACTIVE_COMMENTS
setopt RC_QUOTES

setopt APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt SHARE_HISTORY
setopt HIST_VERIFY

setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_SILENT
setopt PUSHD_TO_HOME

setopt AUTO_MENU
setopt GLOB_COMPLETE
setopt LIST_ROWS_FIRST

unsetopt MULTIOS
# options ]]]

autoload -U select-word-style
select-word-style bash

# [[[ completion
optimized_zicompinit() {
  for zcompdump in $ZINIT[ZCOMPDUMP_PATH](N.mh+24); do
    # only run once a day
    compinit -d "${zcompdump}"
    if [[ ! -s "${zcompdump}.zwc" ]] || [[ "${zcompdump}" -nt "${zcompdump}.zwc" ]]; then
      zcompile "${zcompdump}"
    fi
  done
  compinit -C -d "$ZINIT[ZCOMPDUMP_PATH]"
}

autoload -Uz compinit

zstyle ':completion:*' menu select=2
zstyle ':completion:*' group-name ''
zstyle ':completion:::::' completer _expand _expand_alias _complete _ignored _correct _approximate
zstyle ':completion:*' squeeze-slashes true

zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle '*' single-ignored 'show'

zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZSH_CACHE_DIR}/zcompcache"

zstyle ':completion:*:corrections' format '%B%d%b (%e errors)'
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%B%F{yellow}%d%f%b'
zstyle ':completion:*:warnings' format '%B%F{red}No matches found!%f%b'
# completion ]]]

source "${ZINIT[BIN_DIR]}/zinit.zsh"

zinit as'completion' wait lucid for \
  is-snippet \
    "${DOTFILES_MODULES}/zsh/completions/_keybase"

zinit wait lucid for \
    momo-lab/auto-expand-alias \
  atinit'optimized_zicompinit; zicdreplay' \
    zdharma/fast-syntax-highlighting \
  atload'_zsh_autosuggest_start' \
    zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q zsh-users/zsh-completions' \
    zsh-users/zsh-completions

zinit ice \
  atclone'dircolors -b LS_COLORS > clrs.zsh' \
  atpull'%atclone' pick'clrs.zsh' nocompile'!' \
  atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zinit load trapd00r/LS_COLORS
zinit load zpm-zsh/colorize
zinit load zpm-zsh/ls

zinit ice has'zoxide' wait lucid id-as'zoxide' \
  atclone'zoxide init --no-aliases zsh > zoxide.zsh && echo "z() { __zoxide_z \$@ }" >> zoxide.zsh' \
  atpull'%atclone' run-atpull pick'zoxide.zsh' nocompile'!'
zinit load zdharma/null

zinit is-snippet for \
  "${DOTFILES_MODULES}/aliases.sh" \
  "${DOTFILES_MODULES}/helpers.sh" \
  {{ if eq .chezmoi.os "darwin" -}}
    "${DOTFILES_MODULES}/os.darwin.plugin.sh" \
  {{ end -}}
  "${DOTFILES_MODULES}/gpg.plugin.sh"

zinit wait lucid is-snippet for \
  "${DOTFILES_MODULES}/fzf.plugin.sh" \
  "${DOTFILES_MODULES}/go.plugin.sh" \
  "${DOTFILES_MODULES}/lf.plugin.sh" \
  atload'__init_nvm' \
    "${DOTFILES_MODULES}/node.plugin.sh" \
  "${DOTFILES_MODULES}/python.plugin.sh" \
  "${DOTFILES_MODULES}/ruby.plugin.sh" \
  "${DOTFILES_MODULES}/rust.plugin.sh"

# [[[ zle utilities
zle--change-cursor() {
  local -r style="${1}"
  local -r cursor="\x1b[%s q"
  if [[ "${style}" == "beam" ]]; then
    printf "${cursor}" 6
  elif [[ "${style}" == "block" ]]; then
    printf "${cursor}" 2
  fi
}
# zle utilities ]]]

# [[[ zle-keymap-select
zle-keymap-select() {
  if [[ $KEYMAP == "vicmd" ]]; then
    zle--change-cursor "block"
  else
    zle--change-cursor "beam"
  fi
  zle -R
}
zle -N zle-keymap-select
# zle-keymap-select ]]]

# [[[ zle-line-{init,finish}
zle-line-init () {
  zle--change-cursor "beam"
  printf '%s' ${terminfo[smkx]}
}
zle -N zle-line-init

zle-line-finish () {
  printf '%s' ${terminfo[rmkx]}
}
zle -N zle-line-finish
# zle-line-{init-finish} ]]]

# [[[ keybindings
export KEYTIMEOUT=10

declare -g -A key=(
  Up                "${terminfo[kcuu1]}"
  Down              "${terminfo[kcud1]}"
  Left              "${terminfo[kcub1]}"
  Right             "${terminfo[kcuf1]}"
  Home              "${terminfo[khome]}"
  End               "${terminfo[kend]}"
  PageUp            "${terminfo[kpp]}"
  PageDown          "${terminfo[knp]}"
  Insert            "${terminfo[kich1]}"
  Delete            "${terminfo[kdch1]}"
  BackSpace         "${terminfo[kbs]}"
  Control-Left      "^[[1;5D"
  Control-Right     "^[[1;5C"
  Control-Delete    "^[[3;5~"
  Control-Backspace "^H"
  Shift-Tab         "${terminfo[kcbt]}"
)

bindkey -v

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

bindkey "${key[Up]}" up-line-or-beginning-search
bindkey "${key[Down]}" down-line-or-beginning-search
bindkey "${key[Control-Left]}"  backward-word
bindkey "${key[Control-Right]}" forward-word
bindkey "${key[Control-Backspace]}" backward-kill-word
bindkey "${key[Control-Delete]}" kill-word
bindkey "${key[Shift-Tab]}" reverse-menu-complete
# keybindings ]]]

export STARSHIP_CONFIG=~/.config/starship/config.toml
zinit ice has'starship' id-as'starship' \
  atclone'starship init zsh --print-full-init > starship.zsh' \
  atpull'%atclone' run-atpull pick'starship.zsh' nocompile'!'
zinit load zdharma/null

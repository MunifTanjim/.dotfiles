setopt COMBINING_CHARS
setopt INTERACTIVE_COMMENTS
setopt RC_QUOTES

setopt APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt SHARE_HISTORY
setopt HIST_VERIFY

setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_SILENT
setopt PUSHD_TO_HOME

setopt AUTO_MENU
setopt GLOB_COMPLETE
setopt LIST_ROWS_FIRST

unsetopt MULTIOS

autoload -U select-word-style
select-word-style bash

if (( ${+commands[chezmoi]} )); then
  export DOTFILES=$(chezmoi source-path)
  export DOTFILES_MODULES="${DOTFILES}/.modules"

  _USER_SCRIPTS="${DOTFILES}/.scripts.sh"

  path+=("${_USER_SCRIPTS}")
fi

optimized_zicompinit() {
  for compdump in $ZINIT[ZCOMPDUMP_PATH](N.mh+24); do
    compinit -d "$compdump"
  done
  compinit -C -d "$ZINIT[ZCOMPDUMP_PATH]"
}

source "${ZINIT[BIN_DIR]}/zinit.zsh"

autoload -Uz compinit

zstyle ':completion:*' menu select=2
zstyle ':completion:*' group-name ''
zstyle ':completion:::::' completer _expand _expand_alias _complete _ignored _correct _approximate
zstyle ':completion:*' squeeze-slashes true

zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle '*' single-ignored 'show'

zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$ZSH_CACHE_DIR/zcompcache"

zstyle ':completion:*:corrections' format '%B%d%b (%e errors)'
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%B%F{yellow}%d%f%b'
zstyle ':completion:*:warnings' format '%B%F{red}No matches found!%f%b'

zinit as'completion' wait lucid for \
  is-snippet \
    "${DOTFILES_MODULES}/zsh/completions/_keybase"

zinit wait lucid for \
    momo-lab/auto-expand-alias \
  atinit'optimized_zicompinit; zicdreplay' \
    zdharma/fast-syntax-highlighting \
  atload'_zsh_autosuggest_start' \
    zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q zsh-users/zsh-completions' \
    zsh-users/zsh-completions

zinit ice \
  atclone'dircolors -b LS_COLORS > clrs.zsh' \
  atpull'%atclone' pick'clrs.zsh' nocompile'!' \
  atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zinit load trapd00r/LS_COLORS
zinit load zpm-zsh/colorize
zinit load zpm-zsh/ls

zinit ice has'zoxide' wait lucid id-as'zoxide' \
  atclone'zoxide init --no-aliases zsh > zoxide.zsh && echo "z() { __zoxide_z \$@ }" >> zoxide.zsh' \
  atpull'%atclone' run-atpull pick'zoxide.zsh' nocompile'!'
zinit load zdharma/null

zinit is-snippet for \
  "${DOTFILES_MODULES}/aliases.sh" \
  "${DOTFILES_MODULES}/helpers.sh" \
  {{ if eq .chezmoi.os "darwin" -}}
    "${DOTFILES_MODULES}/os.darwin.plugin.sh" \
  {{ end -}}
  "${DOTFILES_MODULES}/gpg.plugin.sh"

zinit wait lucid is-snippet for \
  "${DOTFILES_MODULES}/fzf.plugin.sh" \
  "${DOTFILES_MODULES}/go.plugin.sh" \
  "${DOTFILES_MODULES}/lf.plugin.sh" \
  atload'__init_nvm' \
    "${DOTFILES_MODULES}/node.plugin.sh" \
  "${DOTFILES_MODULES}/python.plugin.sh" \
  "${DOTFILES_MODULES}/ruby.plugin.sh" \
  "${DOTFILES_MODULES}/rust.plugin.sh"

export STARSHIP_CONFIG=~/.config/starship/config.toml
zinit ice has'starship' id-as'starship' \
  atclone'starship init zsh --print-full-init > starship.zsh' \
  atpull'%atclone' run-atpull pick'starship.zsh' nocompile'!'
zinit load zdharma/null

bindkey -v
export KEYTIMEOUT=10

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

declare -g -A key
{{ if eq .chezmoi.os "darwin" -}}
key[Up]="^[[A"
key[Down]="^[[B"
key[Left]="^[[D"
key[Right]="^[[C"
key[Control-Left]="^[[1;5D"
key[Control-Backspace]="^H" # does not work
key[Control-Right]="^[[1;5C"
key[Control-Delete]="^[[3;5~"
key[Shift-Tab]="^[[Z"
{{- else -}}
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[Control-Left]="^[[1;5D"
key[Control-Right]="^[[1;5C"
key[Control-Backspace]="^H"
key[Control-Delete]="^[[3;5~"
key[Shift-Tab]="${terminfo[kcbt]}"
{{- end }}

bindkey "${key[Up]}" up-line-or-beginning-search
bindkey "${key[Down]}" down-line-or-beginning-search
bindkey "${key[Control-Left]}"  backward-word
bindkey "${key[Control-Right]}" forward-word
bindkey "${key[Control-Backspace]}" backward-kill-word
bindkey "${key[Control-Delete]}" kill-word
bindkey "${key[Shift-Tab]}" reverse-menu-complete

# vim: set filetype=zsh :
